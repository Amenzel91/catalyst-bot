# --- DISCORD webhooks ---
DISCORD_WEBHOOK_URL=                         # REQUIRED: main alerts channel
DISCORD_ADMIN_WEBHOOK=                       # optional: admin/dev channel for heartbeats

# --- Phase B feature flags (safe defaults off) ---
# When enabled, preliminary classification in feeds/analyzer uses the new
# classify.classify() adapter.  Unified classification supports dynamic
# keyword weights and AI adapters and is the default going forward.  Set
# FEATURE_CLASSIFIER_UNIFY=0 to revert to the legacy classifier implementation.
FEATURE_CLASSIFIER_UNIFY=1                   # 1=enable unified classifier bridge (default)
# When enabled, the analyzer will post a truncated summary markdown as an embed to the admin webhook.
FEATURE_ADMIN_EMBED=0                        # 1=enable analyzer summary embed
# When enabled, alerts will include intraday indicators (VWAP/RSI14) when available.
FEATURE_INDICATORS=0                         # 1=enable intraday indicators enrichment

# Optional path to a specific analyzer summary markdown file for admin embed.
# If unset, the helper auto-selects the newest summary_*.md under out/analyzer.
ADMIN_SUMMARY_PATH=

# --- Features ---
FEATURE_ALERTS=1                             # 1=enable alerts
FEATURE_HEARTBEAT=1                          # 1=send boot/interval heartbeats
FEATURE_RECORD_ONLY=0                        # 1=don’t post alerts, only log

# Heartbeat cadence in minutes (0=only at boot and manual)
HEARTBEAT_INTERVAL_MIN=0

# --- Classification gates (all optional; blank disables) ---
MIN_SCORE=
MIN_SENT_ABS=
CATEGORIES_ALLOW=                            # CSV of categories to allow (case-insensitive)

# --- Sources & filters ---
SKIP_SOURCES=                                # e.g. sec_fwp to cut noise while testing
# To refine Finviz noise filtering, create ``data/filters/finviz_noise.txt``
# with one keyword per line.  Each phrase will be matched case‑insensitively
# against Finviz headlines to filter out spam and legal notices.  Lines
# beginning with ``#`` are treated as comments.  No environment
# variable is required.
PRICE_CEILING=                               # e.g. 10.0 to skip tickers > $10
PRICE_FLOOR=                                 # e.g. 1.0 to skip penny stocks < $1
IGNORE_INSTRUMENT_TICKERS=1                  # 1=drop warrants/units/etc

# --- Ticker extraction flags ---
ALLOW_OTC_TICKERS=0                          # 1=allow OTCMKTS/OTCQX/OTCQB prefixes
DOLLAR_TICKERS_REQUIRE_EXCHANGE=0            # 1=drop bare $TICKER unless exchange-qualified

# --- Rate limiting / pacing (alerts.py) ---
ALERTS_RESPECT_RL_ON_SUCCESS=1               # gently pace when Discord bucket empties
ALERTS_MIN_INTERVAL_MS=300                   # soft spacing per webhook (ms)
ALERTS_JITTER_MS=150                         # random jitter added after success (ms)
MAX_ALERTS_PER_CYCLE=40                      # cap per run loop

# Per-key burst limiter (alerts_rate_limit.py). Off by default in prod.
HOOK_ALERTS_RATE_LIMIT=0
ALERTS_RATE_WINDOW_SECS=60
ALERTS_RATE_MAX=4

# --- Analyzer / misc ---
TICKERS_DB_PATH=                             # optional override; else data/tickers.db

# --- Logging ---
LOG_LEVEL=INFO                               # DEBUG, INFO, WARNING, ERROR

# --- Finviz Elite (news export) ---
FINVIZ_ELITE_AUTH=                               # paste your Finviz Elite API token (legacy/fallback)
FINVIZ_AUTH_TOKEN=                               # preferred Finviz API token; falls back to FINVIZ_ELITE_AUTH when unset
FEATURE_FINVIZ_NEWS=1                            # 1=enable, 0=disable
FINVIZ_NEWS_KIND=stocks                          # market|stocks|etfs|crypto
FINVIZ_NEWS_TICKERS=                             # optional CSV filter: e.g. AAPL,MSFT
FINVIZ_NEWS_INCLUDE_BLOGS=0                      # 0=news only, 1=include blogs
FINVIZ_NEWS_MAX=200                              # cap items per pull
FINVIZ_NEWS_TIMEOUT=10                           # seconds
# FINVIZ_NEWS_PARAMS=pid=12345                   # optional extra query params (e.g., portfolio id)

# --- Phase‑C: Provider & sentiment features ---
#
# Tiingo real‑time quotes: set your Tiingo API key and flip FEATURE_TIINGO=1
# to prefer Tiingo for last/prev price snapshots.  The default provider order
# is ``tiingo,av,yf`` – see MARKET_PROVIDER_ORDER below.  When this flag is
# off or the key is blank, the bot falls back to Alpha Vantage and yfinance.
FEATURE_TIINGO=0
TIINGO_API_KEY=

# Financial Modeling Prep stock news sentiment feed.  When enabled, the bot
# fetches sentiment scores via the FMP RSS endpoint and attaches a
# ``sentiment_fmp`` field to events.  The free feed does not require a key,
# but future tiers may.  Leave FMP_API_KEY blank unless you have one.
FEATURE_FMP_SENTIMENT=0
FMP_API_KEY=

# --- External news sentiment sources ---
# Enable the aggregated news sentiment layer.  When FEATURE_NEWS_SENTIMENT=1 the
# bot will call enabled providers (Alpha Vantage, Marketaux, StockNewsAPI and
# Finnhub) to compute a combined sentiment score for each ticker.  Use the
# per‑provider feature flags below to turn individual feeds on or off.
FEATURE_NEWS_SENTIMENT=1
# Alpha Vantage news sentiment endpoint.  Requires ALPHAVANTAGE_API_KEY (see
# above).  Defaults to on.
FEATURE_ALPHA_SENTIMENT=1
# Marketaux sentiment feed.  Set to 1 to enable and provide a MARKETAUX_API_KEY.
FEATURE_MARKETAUX_SENTIMENT=0
MARKETAUX_API_KEY=
# StockNewsAPI sentiment feed.  Set to 1 to enable and provide a STOCKNEWS_API_KEY.
FEATURE_STOCKNEWS_SENTIMENT=0
STOCKNEWS_API_KEY=
# Finnhub sentiment feed.  Set to 1 to enable and provide a FINNHUB_API_KEY.
FEATURE_FINNHUB_SENTIMENT=0
FINNHUB_API_KEY=
# Provider weights used when combining sentiment scores.  Values do not need
# to sum to 1 – the aggregator normalises weights across responding providers.
# Default: Alpha=0.4, Marketaux=0.3, StockNewsAPI=0.3, Finnhub=0.0.
SENTIMENT_WEIGHT_ALPHA=0.4
SENTIMENT_WEIGHT_MARKETAUX=0.3
SENTIMENT_WEIGHT_STOCKNEWS=0.3
SENTIMENT_WEIGHT_FINNHUB=0.0
# Minimum total number of articles across all providers before a combined
# sentiment score is returned.  When the sum of n_articles is below this
# threshold, the bot falls back to local sentiment only.
SENTIMENT_MIN_ARTICLES=1

# Finviz news export feed.  The Elite plan allows exporting filtered news
# as CSV via a custom URL.  Provide your export URL (including v= and auth
# parameters) here and set FEATURE_FINVIZ_NEWS_EXPORT=1 to enable.  Rows
# without tickers will be included as general market news.
FEATURE_FINVIZ_NEWS_EXPORT=0
FINVIZ_NEWS_EXPORT_URL=

# Watchlist support.  When FEATURE_WATCHLIST=1 the bot will load the CSV
# defined by WATCHLIST_CSV once per cycle and bypass the price ceiling for
# tickers on the list.  The file must have a ``ticker`` column and may
# include optional ``rationale`` or ``weight`` columns.
FEATURE_WATCHLIST=0
WATCHLIST_CSV=data/watchlist.csv

# Screener boost support.  When FEATURE_SCREENER_BOOST=1 the bot will load
# the CSV defined by SCREENER_CSV once per cycle and treat its tickers as
# part of the watchlist.  This allows you to import a Finviz screener
# export (e.g. ``data/finviz.csv``) and have those names bypass price
# gating.  The file is expected to contain a column named "Ticker" or
# "Symbol", but will fall back to using the first column when the
# standard header is missing.
FEATURE_SCREENER_BOOST=0
SCREENER_CSV=data/finviz.csv

# Rich alert charts.  Set FEATURE_RICH_ALERTS=1 to attach an intraday
# candlestick chart for each alert.  Charts require Matplotlib and
# mplfinance; if unavailable the bot will silently skip chart rendering.
FEATURE_RICH_ALERTS=0

# Optional: fallback to Finviz chart for tickers if QuickChart and rich alerts are disabled.
# When FEATURE_FINVIZ_CHART=1, the bot attaches a static Finviz candlestick image
# (15-min delayed) for each alert.  This is a lightweight alternative to QuickChart
# and matplotlib.  Defaults to 0 (off).  Requires a Finviz screener view ID (see below).
FEATURE_FINVIZ_CHART=0

# Finviz screener view used by the breakout scanner and Finviz charts.  When
# generating breakout candidates, the scanner will fetch this view ID to
# filter stocks by price, volume and performance.  The default view (152)
# corresponds to "52 Week High/Low" on Finviz Elite.  Adjust this only if you
# maintain a custom screener view on your Finviz Elite account.
FINVIZ_SCREENER_VIEW=152

# --- Advanced Multi-Panel Charts with Interactive Timeframe Switching ---
# Enable advanced multi-panel financial charts with price/volume/RSI/MACD.
# When FEATURE_ADVANCED_CHARTS=1, alerts will include a professional-grade
# dark-themed chart with multiple panels and interactive timeframe buttons
# (1D, 5D, 1M, 3M, 1Y). Requires matplotlib and mplfinance. Takes precedence
# over FEATURE_QUICKCHART_POST when enabled.
FEATURE_ADVANCED_CHARTS=0

# Default timeframe for charts. Options: 1D, 5D, 1M, 3M, 1Y
# This determines which timeframe is shown when an alert is first posted.
# Users can switch timeframes using the Discord buttons.
CHART_DEFAULT_TIMEFRAME=1D

# Chart cache TTL in seconds. Generated charts are cached to avoid
# regenerating identical charts. Default: 300 seconds (5 minutes).
CHART_CACHE_TTL_SECONDS=300

# Chart cache directory. Where cached chart images are stored.
CHART_CACHE_DIR=out/charts/cache

# Enable/disable timeframe switching buttons on Discord alerts.
# Set to 0 to disable interactive buttons (charts will still be generated).
FEATURE_CHART_BUTTONS=1

# Discord Application Public Key (required for interaction verification).
# When using interactive buttons, set this to your Discord app's public key
# to verify interaction requests. Leave blank if not using interactions.
DISCORD_PUBLIC_KEY=

# --- Patch‑5: Watchlist cascade and 52‑week low scanner ---
# When enabled, the bot maintains a stateful watchlist where tickers decay from
# HOT to WARM to COOL over time.  The state is persisted to the JSON file
# defined by WATCHLIST_STATE_FILE (see below).  Set FEATURE_WATCHLIST_CASCADE=1
# to enable cascading behaviour.  Durations are specified in days.
FEATURE_WATCHLIST_CASCADE=0
# Number of days to keep a ticker in the HOT state before demoting to WARM.
WATCHLIST_HOT_DAYS=7
# Number of days to keep a ticker in the WARM state before demoting to COOL.
WATCHLIST_WARM_DAYS=21
# Number of days to keep a ticker in the COOL state before it can be removed.
# Currently, COOL tickers remain indefinitely; this setting is reserved for
# future use.
WATCHLIST_COOL_DAYS=60
# Path to the JSON file used to persist the cascade state.  Relative paths
# are resolved relative to the project root.  Defaults to data/watchlist_state.json.
WATCHLIST_STATE_FILE=data/watchlist_state.json

# Enable the 52‑week low scanner.  When enabled, the bot will query Finviz
# for tickers making new 52‑week lows and add them to the watchlist cascade.
FEATURE_52W_LOW_SCANNER=0
# Percentage above the 52‑week low considered "near" the low.  Finviz does
# not currently expose a distance filter, so this value is unused for now
# but is reserved for future expansion.
LOW_DISTANCE_PCT=5
# Minimum average daily volume (shares) required to consider a stock for the
# 52‑week low scanner.  Use 0 to disable the volume filter.  Defaults to
# 300000 shares.
LOW_MIN_AVG_VOL=300000

# Alpaca streaming.  When FEATURE_ALPACA_STREAM=1 and valid credentials are
# provided, the bot subscribes to the Alpaca websocket for each alerted
# ticker for up to STREAM_SAMPLE_WINDOW_SEC seconds after posting.  This can
# provide more timely price updates.  Leave this disabled if you do not
# have an Alpaca IEX API subscription.
FEATURE_ALPACA_STREAM=0
ALPACA_API_KEY=
ALPACA_SECRET=
STREAM_SAMPLE_WINDOW_SEC=0

# Admin digest & approval loop.  Enabling FEATURE_APPROVAL_LOOP causes the
# analyzer to write pending plan files and wait for approval before
# applying weight adjustments.  Approval marker files are stored under
# APPROVAL_DIR.  Admin summary embeds require FEATURE_ADMIN_EMBED=1 and a
# valid DISCORD_ADMIN_WEBHOOK.
FEATURE_APPROVAL_LOOP=0
APPROVAL_DIR=out/approvals

# Earnings calendar cache.  Path to the cached earnings calendar pulled by
# ``python -m catalyst_bot.jobs.earnings_pull``.  The analyzer will read
# this file and annotate earnings days in its summary.  Change this path
# if you wish to store the calendar elsewhere.
EARNINGS_CALENDAR_CACHE=data/earnings_calendar.csv

# Provider order.  Comma‑separated list of price providers to query for
# last/prev snapshots.  Recognised values: ``tiingo``, ``av`` (Alpha Vantage),
# ``yf`` (yfinance).  The default order is ``tiingo,av,yf``.  You can skip
# providers (e.g. av,yf) or reorder them via this variable.
MARKET_PROVIDER_ORDER=tiingo,av,yf

# Backtest provider order.  Overrides ``MARKET_PROVIDER_ORDER`` for the
# backtest simulator.  Provide a comma‑separated list of providers in
# the desired priority for historical simulations.  If blank, the
# simulator falls back to MARKET_PROVIDER_ORDER.  Recognised values
# include ``tiingo``, ``av``, ``alpha`` and ``yf``.
BACKTEST_PROVIDER_ORDER=

# Plain logging mode.  When LOG_PLAIN=1 the bot emits human‑readable
# one‑line logs to the console.  Structured JSON logs are still written to
# data/logs/bot.jsonl for downstream ingestion.  Leave at 0 to use
# compact JSON logs on the console.
LOG_PLAIN=0

# --- Patch‑2: QuickChart, momentum and local sentiment ---
# Generate hosted candlestick charts via the QuickChart API.  When this flag
# is enabled, the bot will build a Chart.js config and return an image URL.
# If disabled, the bot falls back to rich alerts (matplotlib) or Finviz charts.
FEATURE_QUICKCHART=0

# Optional QuickChart API key.  Providing a key increases the API rate limit for
# QuickChart's /chart/create endpoint used to shorten long Chart.js configs.
# Leave blank if you do not have a key.
QUICKCHART_API_KEY=

# Optional base URL for QuickChart.  Override this to point the bot at
# a self‑hosted QuickChart instance (e.g. http://localhost:3400/chart).
# When unset, the bot uses the public https://quickchart.io/chart API.
QUICKCHART_BASE_URL=

# Compute additional intraday momentum indicators (MACD, EMA crosses, VWAP delta)
# from recent price history.  Requires FEATURE_INDICATORS=1 to have an effect.
FEATURE_MOMENTUM_INDICATORS=0

# Use a local sentiment analyser when external feeds are unavailable.  When
# enabled, the bot will compute a VADER/lexicon-based sentiment score for
# each headline and display it alongside FMP sentiment (when available).
FEATURE_LOCAL_SENTIMENT=0

# --- Patch‑Wave‑1: Bullishness gauge & sentiment logging ---
# Enable the combined bullishness sentiment gauge. When turned on, alerts
# display a single score summarising the weighted inputs from local
# sentiment, external news sentiment, SEC filings, analyst signals and
# earnings surprises.  Set to 1 to activate.  Defaults to 0 (off).
FEATURE_BULLISHNESS_GAUGE=0

# Enable per‑event sentiment logging. When this flag is 1, the bot
# appends a JSON line to ``data/sentiment_logs/YYYY‑MM‑DD.jsonl`` for
# each processed event.  The log includes the individual component
# scores (local, external, SEC, analyst, earnings) and the final
# combined score and label.  Logging is disabled by default.
FEATURE_SENTIMENT_LOGGING=0

# Comma‑separated list of exchange codes to allow during feed ingestion.
# Headlines that specify an exchange not in this list are dropped before
# price and volatility filtering.  Exchanges are compared
# case‑insensitively.  Valid examples include nasdaq, nyse, amex.  By
# default, OTC markets (OTCQB/OTCMKTS) are excluded.
ALLOWED_EXCHANGES=nasdaq,nyse,amex

# Weight assigned to the local VADER sentiment score when computing the
# combined bullishness gauge.  Use non‑negative floats; set to 0 to
# exclude local sentiment entirely.  Combined weights across sources are
# normalised internally.
SENTIMENT_WEIGHT_LOCAL=0.4

# Weight assigned to the aggregated external news sentiment when
# computing the gauge.  When external news feeds are disabled or
# unavailable, this weight has no effect.  Use 0.0 to exclude external
# sentiment.
SENTIMENT_WEIGHT_EXT=0.3

# Weight assigned to the analyst sentiment score (implied return) when
# computing the gauge.  Analyst sentiment is derived from consensus
# targets relative to the last price.  Set to 0.0 to ignore analyst
# sentiment.
SENTIMENT_WEIGHT_ANALYST=0.1

# Note: SEC and earnings weights are defined via SENTIMENT_WEIGHT_SEC
# and SENTIMENT_WEIGHT_EARNINGS further below.  Those values are
# reused by the bullishness gauge when the corresponding features are
# enabled.

# --- Patch‑2: Breakout scanner ---
# Enable the proactive breakout scanner.  When turned on, the bot will query
# Finviz Elite for sub‑$10 tickers with unusual volume and new highs and
# generate events for them.  Requires a valid FINVIZ_AUTH_TOKEN.
FEATURE_BREAKOUT_SCANNER=0
# Minimum average daily volume (shares) a ticker must have to be considered a
# breakout candidate.  Values are plain numbers (e.g. 300000 for 300k).  Set
# to 0 to disable the avg volume filter.
BREAKOUT_MIN_AVG_VOL=300000
# Minimum relative volume threshold (> 1 indicates higher than usual activity).
# Use a decimal value such as 1.5.  Set to 0 to disable the relative volume filter.
BREAKOUT_MIN_RELVOL=1.5

# --- Patch‑3: Deduplication & duplicate suppression ---
# Enable refined deduplication across sources and cycles.  When
# FEATURE_DEDUP_REFINED=1 the bot persists a first‑seen index in
# ``data/dedup/first_seen.db`` and suppresses re‑alerting for previously
# observed signatures.  Defaults to 0 (off) for backwards compatibility.
FEATURE_DEDUP_REFINED=0

# Persistent seen store.  When enabled (default), the bot will maintain a
# lightweight SQLite database (``data/seen_ids.sqlite``) to keep track of
# item IDs that have already been alerted on.  This prevents duplicate
# notifications across cycles and restarts.  Set FEATURE_PERSIST_SEEN=0 to
# disable persistent storage (in‑memory TTL still applies).
FEATURE_PERSIST_SEEN=1

# Duplicate suppression TTL for the in‑memory seen cache.  The bot uses
# a small in‑process cache to suppress duplicate alerts for a period of
# time even when persistent dedup is disabled.  Specify the TTL in
# seconds.  The default is 900 seconds (15 minutes).  Increase this
# value to avoid repeat alerts over longer periods (e.g. 86400 for 24 hours).
SEEN_TTL_SECONDS=900

# TTL for the persistent seen store, in days.  Entries older than this
# many days are purged on startup.  Defaults to 7 days if unset.  You
# usually don’t need to change this unless your alert cadence is very
# high.
SEEN_TTL_DAYS=7

# --- Patch‑6: Analyst signals ---
# Enable consensus analyst price targets and implied return classification.
# When FEATURE_ANALYST_SIGNALS=1 the bot will query the configured provider
# (ANALYST_PROVIDER) for each ticker and attach `analyst_target`,
# `analyst_implied_return` and `analyst_label` to events.  Use the
# ANALYST_RETURN_THRESHOLD to set the percentage needed to be considered
# Bullish/Bearish; returns between ±threshold are Neutral.
FEATURE_ANALYST_SIGNALS=0
# Percentage threshold used to classify the implied return.  A value of
# 10.0 means the target must be at least +10 % above the current price to be
# Bullish and at least −10 % below to be Bearish.
ANALYST_RETURN_THRESHOLD=10.0
# Provider used to fetch price targets.  Supported values:
#   fmp   – Financial Modeling Prep API (requires FMP_API_KEY or ANALYST_API_KEY)
#   yahoo – yfinance library (no key required)
ANALYST_PROVIDER=fmp
# Optional API key used when the provider is fmp.  Leave blank to fall back
# to FMP_API_KEY.  Ignored when provider=yahoo.
ANALYST_API_KEY=

# --- Patch‑6: Earnings alerts ---
# Enable earnings alerts and sentiment integration.  When set to 1, the bot
# will retrieve upcoming and past earnings information via the configured
# provider (currently the yfinance module) and attach it to events.  It
# adds the next earnings date, EPS estimate, reported EPS, surprise
# percentage and classification (Bullish/Bearish/Neutral/Upcoming) to
# alerts, and feeds the surprise score into the combined sentiment gauge.
# Defaults to 0 (off).
FEATURE_EARNINGS_ALERTS=0
# Number of days ahead to include upcoming earnings.  Earnings scheduled
# beyond this lookahead window will not be attached or alerted on.  A
# value of 14 means only earnings within the next two weeks are
# considered.  Defaults to 14.
EARNINGS_LOOKAHEAD_DAYS=14
# Weight of earnings sentiment in the combined sentiment gauge.  A
# value of 0.1 gives earnings surprises moderate influence.  Increase or
# decrease to adjust how much earnings affect the final sentiment.
SENTIMENT_WEIGHT_EARNINGS=0.1

# --- Timezone and analyzer schedule ---
# Timezone used for formatting timestamps in logs and messages.  Defaults
# to America/Chicago.  Change this to your local time zone if required.
TZ=America/Chicago
# Hour (UTC) when the analyzer daily job runs.  Defaults to 21 (3 PM CT).
ANALYZER_UTC_HOUR=21
# Minute (UTC) of the hour when the analyzer job runs.  Defaults to 30.
ANALYZER_UTC_MINUTE=30
